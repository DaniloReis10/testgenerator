package entities;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * Topico Value Object.
  * This class is value object representing database table Topico
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class Topico implements Cloneable, Serializable 
{
	private static final long serialVersionUID = 2448383518547915732L;
	
	/** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID;
	private int DisciplinaId;
	private String TopicoNome;
	private int CargaHoraria;

    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Topico() 
	{
    }

    public Topico(int ID, int DisciplinaId, String TopicoNome, int CargaHoraria) 
	{
		this.ID = ID;
		this.DisciplinaId = DisciplinaId;
		this.TopicoNome = TopicoNome;
		this.CargaHoraria = CargaHoraria;
    }
    
    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID() 
    {
		return ID;
	}

	public void setID(int iD) 
	{
		ID = iD;
	}

	public int getDisciplinaId() 
	{
		return DisciplinaId;
	}

	public void setDisciplinaId(int disciplinaId) 
	{
		DisciplinaId = disciplinaId;
	}

	public String getTopicoNome() 
	{
		return TopicoNome;
	}

	public void setTopicoNome(String topicoNome)
	{
		TopicoNome = topicoNome;
	}

	public int getCargaHoraria() 
	{
		return CargaHoraria;
	}

	public void setCargaHoraria(int cargaHoraria) 
	{
		CargaHoraria = cargaHoraria;
	}


    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID, int DisciplinaId, String TopicoNome, int CargaHoraria) 
    {
    	this.ID = ID;
    	this.DisciplinaId = DisciplinaId;
    	this.TopicoNome = TopicoNome;
    	this.CargaHoraria = CargaHoraria;
    }


    /** 
     * hasEqualMapping-method will compare two Topico instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Topico valueObject) 
    {
		if (valueObject.getID() != this.ID)
            return(false);
		if (valueObject.getDisciplinaId() != this.DisciplinaId)
		            return(false);
		if (this.TopicoNome == null)
			if (valueObject.getTopicoNome() != null)
				return(false);
		else if (!this.TopicoNome.equals(valueObject.getTopicoNome()))
		            return(false);
		if (valueObject.getCargaHoraria() != this.CargaHoraria)
			return(false);
		
		  return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() 
    {
        return this.TopicoNome;
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() 
    {
    	Topico cloned = new Topico();

		cloned.setID(this.ID); 
		cloned.setDisciplinaId(this.DisciplinaId); 
		if (this.TopicoNome != null)
		     cloned.setTopicoNome(new String(this.TopicoNome)); 
		cloned.setCargaHoraria(this.CargaHoraria); 
		
		return cloned;
    }


    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() 
    {
        return "DaoGen version 2.4.1";
    }

}
